[{"path":"index.html","id":"intro","chapter":"Introduction","heading":"Introduction","text":"Welcome statistics!want, can also download book PDF EPUB file. aware print versions missing richer formatting online version. Besides, recommended way work material download R notebook file (.Rmd) top chapter work RStudio.","code":""},{"path":"index.html","id":"intro-philosophy","chapter":"Introduction","heading":"Philosophy","text":"[TODO]","code":""},{"path":"index.html","id":"intro-structure","chapter":"Introduction","heading":"Course structure","text":"[TODO]","code":""},{"path":"index.html","id":"intro-onward","chapter":"Introduction","heading":"Onward and upward","text":"hope enjoy textbook. can provide feedback two ways:preferred method file issue Github page: https://github.com/VectorPosse/Intro_Stats/issuesThe preferred method file issue Github page: https://github.com/VectorPosse/Intro_Stats/issuesAlternatively, send email: sraleigh@westminstercollege.eduAlternatively, send email: sraleigh@westminstercollege.edu","code":""},{"path":"intror.html","id":"intror","chapter":"1 Introduction to R","heading":"1 Introduction to R","text":"","code":""},{"path":"intror.html","id":"functions-introduced-in-this-chapter","chapter":"1 Introduction to R","heading":"Functions introduced in this chapter:","text":"<-, c, sum, mean, library, ?, ??, View, head, tail, str, NROW, NCOL, summary, $","code":""},{"path":"intror.html","id":"intror-intro","chapter":"1 Introduction to R","heading":"1.1 Introduction","text":"Welcome R! chapter walk everything need know get started using R.go chapter (future chapters), please read slowly carefully, pay attention detail. Many steps depend correct execution previous steps, reading quickly casually might come back bite later.","code":""},{"path":"intror.html","id":"intror-whatisr","chapter":"1 Introduction to R","heading":"1.2 What is R?","text":"R programming language specifically designed statistics. Don’t intimidated word “programming” though. goal course make computer programmer. use R statistics, don’t need know anything programming . Every chapter throughout whole course give examples commands need use. use example commands templates make necessary changes adapt data ’re trying analyze.greatest thing R free open source. means can download use free, also can inspect modify source code R functions. kind transparency exist commercial software. net result robust, secure, widely-used language literally tens thousands contributions R users world.R also become standard tool statistical analysis, academia industry government. Although commercial packages still widely used, many practitioners switching R due cost (free!) relative ease use. course, able list R experience résumé future employer value . might even help get job!","code":""},{"path":"intror.html","id":"intror-rstudio","chapter":"1 Introduction to R","heading":"1.3 RStudio","text":"RStudio ``Integrated Development Environment,’’ IDE short. IDE tool working programming language fancier just simple text editor. IDEs give shortcuts, menus, debugging facilities, syntax highlighting, things make life easy possible.Open RStudio can explore areas ’ll using future.left side screen, see big pane called “Console”. startup text , , see “command prompt”: symbol “>” followed blinking cursor. (cursor blinking, means focus another pane. Click anywhere Console cursor start blinking .)command prompt can one intimidating things starting use R. ’s just sitting waiting something. Unlike programs run commands menus, R requires know need type make work.’ll return Console moment.Next, look upper-right corner screen. least three tabs pane starting “Environment”, “History”, “Connections”. “Environment” (also called “Global Environment”) keeps track things define working R. ’s nothing see yet haven’t defined anything! “History” tab likewise empty; , haven’t done anything yet. won’t use “Connections” tab course. (Depending version RStudio using configuration, may see additional tabs, won’t need course.)Now look lower-right corner screen. likely five tabs : “Files”, “Plots”, “Packages”, “Help”, “Viewer”. “Files” tab eventually contain files upload create. “Plots” show result commands produce graphs charts. “Packages” explained later. “Help” precisely sounds like; useful place get know. never use “Viewer” tab, don’t worry .","code":""},{"path":"intror.html","id":"intror-trysomething","chapter":"1 Introduction to R","heading":"1.4 Try something!","text":"let’s something R! Go back Console command prompt (“>” symbol blinking cursor), typeand hit Enter.Congratulations! just ran first command R. ’s downhill . R really nothing glorified calculator.Okay, let’s something slightly sophisticated. ’s important note R case-sensitive, means lowercase letters uppercase letters treated differently. Type following, making sure use lowercase c, hit Enter:just created “vector”. use letter c enclose list things parentheses, tell R “combine” elements. , vector just collection data. little arrow <- says take ’s right assign symbol left. vector x now saved memory. long don’t terminate current R session, vector available .Check “Environment” pane now. see vector x just created, along information . Next x, says num, means vector numerical data. says [1:5] indicates five elements vector x.command prompt Console, typeand hit Enter. Yup, x . R knows . may wondering [1] appears beginning line. see means, try typing (hit Enter—point ’m going stop reminding hit Enter everything type):R clever, alphabet built name letters.TypeNow can see [1] meant ? Assuming letters spilled onto one line Console, see number brackets beginning line telling numerical position first entry new line.Since ’ve done things, check “Global Environment” upper-right corner. see two objects ’ve defined thus far, x y. Now click “History” tab. commands run far. can handy need go back re-run earlier command, want modify earlier command ’s easier edit slightly type . get older command back Console, either double-click , select click “Console” button top pane.want re-use old command, usually long since last used . case, even handy trick. Click Console cursor blinking blank command prompt. Now hit arrow keyboard. . Now hit arrow twice. great way access recently used commands command history.Let’s something x. TypeI bet figured just happened.Now tryWhat wanted save mean five numbers use later? can assign result another variable! Type following observe effect Environment.makes difference letter combination letters use name variables. example,just saves mean differently named variable. general, variable names can combination characters letters, numbers, underscore symbols (_), dots (.). (course, prefer underscores dots.) use spaces special character names variables.1 avoid variable names words predefined R functions; example, type mean <- mean(x).","code":"\n1+1\nx <- c(1, 3, 4, 7, 9)\nx\ny <- letters\ny\nsum(x)\nmean(x)\nm <- mean(x)\nmean_x <- mean(x)"},{"path":"intror.html","id":"intror-loadpackages","chapter":"1 Introduction to R","heading":"1.5 Load packages","text":"Packages collections commands, functions, sometimes data people world write maintain. packages extend capabilities R add useful tools. example, like use palmerpenguins package includes interesting data set penguins.installed R RStudio machine instead accessing RStudio Workbench browser, ’ll need type install.packages(\"palmerpenguins\") ’ve never used palmerpenguins package . using RStudio Workbench browser, may able install packages may admin privileges. need package installed, contact person administers server.data set called penguins. Let’s see happens try access data set without loading package contains . Try typing :received error. makes sense R doesn’t know anything data set called penguins.Now—assuming palmerpenguins package installed—type command prompt:didn’t look like anything happened. However, background, stuff palmerpenguins package became available use.Let’s test claim. Hit arrow twice get back see Console (can manually re-type , ’s fun!):Now R knows penguins data, last command printed Console.Go look “Packages” tab pane lower-right corner screen. Scroll little get “P”s. able find palmerpenguins package. ’ll also notice check mark , indicating package loaded current R session.must use library command every new R session want use package.2 terminate R session, R forgets package. ever situation trying use command know ’re typing correctly, ’re still getting error, check see package containing command loaded library. (Many R commands “base R” commands, meaning come R special package required access . set letters used one example.)","code":"\npenguins\nlibrary(palmerpenguins)\npenguins"},{"path":"intror.html","id":"intror-gettinghelp","chapter":"1 Introduction to R","heading":"1.6 Getting help","text":"four important ways get help R. first obvious “Help” tab lower-right pane screen. Click tab now. search bar right, type penguins hit Enter. Take minutes read help file.Help files good authors. Fortunately, package developers conscientious enough write decent help files. don’t surprised help file doesn’t quite tell want know. highly technical R functions, sometimes help files downright inscrutable. Try looking help file grep function. Can honestly say idea command might use ? time, become knowledgeable R works, help files get less mysterious.second way getting help Console. Go Console typeThe question mark tells R need help R command letters. bring help file Help pane looking .Sometimes, don’t know exactly name command . example, suppose misremembered name thought letter instead letters. Try typing :received error command called letter. Try instead:scroll bit Help pane. Two question marks tell R picky spelling. bring whole bunch possibilities Help pane, representing R’s best guess might searching . (case, ’s easy find. ’d know help file letters appeared help page called base::Constants.)fourth way get help—often useful way—use best friend Google. don’t want just search “R”. (’s downside using single letter alphabet name programming language.) However, type “R __________” fill blank topic interest, Google usually pretty good job sending relevant pages. Within first hits, fact, ’ll often see online copy help file see R. Frequently, next hits lead StackOverflow knowledgeable people post helpful responses common questions.Use Google find take square root number R. Test newly-discovered function numbers make sure works.","code":"\n?letters\n?letter\n??letter"},{"path":"intror.html","id":"intror-understandingdata","chapter":"1 Introduction to R","heading":"1.7 Understanding the data","text":"Let’s go back penguins data contained penguins data set palmerpenguins package.first thing understand data set read help file . (’ve already done penguins data.) course, works data files come R package can loaded R. using R analyze data, presumably don’t need help file. ’re analyzing data another source, ’ll go source find data.Next, can also look data “spreadsheet” form. Type(sure ’re using upper-case “V” View.) new pane open upper-left corner screen. pane, penguins data appears grid format, like spreadsheet. observations (individual penguins) rows variables columns. also let sort column clicking arrows next variable name across top.Try print just rows data Console:can customize specifying number rows print. (Don’t forget arrow trick!)tail command something similar.’re working HTML documents like one, ’s usually necessary use View, head, tail HTML format print data frame lot neatly Console. need type following code; just look table appears.can scroll rows using numbers bottom “Next” button. thing can’t can View sort columns.want understand “structure” data. , use str command. Try :tells us several important things. First says 344 observations 8 variables. can isolate pieces information separately well, need:give number rows columns, respectively.str command also tells us variables data set. ’ll talk later.need able summarize variables data set. summary command one way :may recognize terms like “Median” “1st Qu.” “3rd Qu.” yet. Nevertheless, can see summary come handy.","code":"\nView(penguins)\nhead(penguins)\nhead(penguins, n = 10)\ntail(penguins)\npenguins## # A tibble: 344 × 8\n##    species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n##    <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n##  1 Adelie  Torgersen           39.1          18.7               181        3750\n##  2 Adelie  Torgersen           39.5          17.4               186        3800\n##  3 Adelie  Torgersen           40.3          18                 195        3250\n##  4 Adelie  Torgersen           NA            NA                  NA          NA\n##  5 Adelie  Torgersen           36.7          19.3               193        3450\n##  6 Adelie  Torgersen           39.3          20.6               190        3650\n##  7 Adelie  Torgersen           38.9          17.8               181        3625\n##  8 Adelie  Torgersen           39.2          19.6               195        4675\n##  9 Adelie  Torgersen           34.1          18.1               193        3475\n## 10 Adelie  Torgersen           42            20.2               190        4250\n## # … with 334 more rows, and 2 more variables: sex <fct>, year <int>\nstr(penguins)\nNROW(penguins)\nNCOL(penguins)\nsummary(penguins)"},{"path":"intror.html","id":"intror-understandingvariables","chapter":"1 Introduction to R","heading":"1.8 Understanding the variables","text":"want look one variable time, use dollar sign grab . Try :list entire body_mass_g column, words, body masses (grams) penguins particular study. want see first , can use head like .want structure variable body_mass_g, :Notice letters int beginning line. stands “integer” another word whole number. words, patients’ ages appear data set whole numbers. data types ’ll see future:num: general numerical data (can integers well decimal parts).chr: means “character”, used character strings, can sequence letters numbers. example, researcher recorded notes penguin, notes recorded character variable.factor: categorical data, data groups observations together categories. example, species categorical. generally recorded like character strings, factor variables structure take limited number possible values corresponding generally small number categories. ’ll learn lot factor variables future chapters.data types, ones far common ’ll encounter regular basis.want summarize variable body_mass_g, can :executing commands , may noticed entries listed NA. “missing” values. worth paying attention missing values thinking carefully might missing. now, just make mental note NA code R uses data missing. (blank cell spreadsheet.)","code":"\npenguins$body_mass_g\nhead(penguins$body_mass_g)\nstr(penguins$body_mass_g)\nsummary(penguins$body_mass_g)"},{"path":"intror.html","id":"intror-projects","chapter":"1 Introduction to R","heading":"1.9 Projects","text":"Using files R requires organized. R uses ’s called “working directory” find files needs. Therefore, can’t just put files old place expect R able find .One way ensuring files located R can find organize work projects. Look far upper-right corner RStudio screen. see text says Project: (None). means currently project. ’re going create new project preparation next chapter using R Markdown.Open drop-menu select New Project. dialog box opens, select New Directory, New Project.’ll need give project name. general, descriptive name—one still remind several years project . thing remember project names file names spaces . fact, avoid kinds special characters well, like commas, number signs, etc. Stick letters numerals just fine. want multi-word project name file name, recommend using underscores. R allow name projects spaces modern operating systems set handle file names spaces, certain things either don’t work require awkward workarounds file names spaces. case, let’s type 02_Using_R_Markdown “Directory name”. Leave everything else alone click Create Project.see screen refresh R restart.see new file called 02_Using_R_Markdown.Rproj Files pane, never touch file. ’s just RStudio keep track project details.everything works way , creating new project create new folder, put folder, automatically make working directory.additional files need project placed directory. Let’s put file right now. Click link download next assignment file:[LINK GOES ]file now likely sitting kind “Downloads” folder machine, need get file working directory.installed R RStudio machine, ’ll need navigate system find downloaded file move copy project working directory. (done easily using File Explorer Windows Finder MacOS.) using RStudio Workbench web browser, ’ll need upload project folder using “Upload” button Files tab.","code":""},{"path":"intror.html","id":"intror-conclusion","chapter":"1 Introduction to R","heading":"1.10 Conclusion","text":"often said steep learning curve learning R. true extent. R harder use first types software. Nevertheless, course, work hard ease first hurdle get moving relatively quickly. Don’t get frustrated don’t give ! Learning R worth effort put . Eventually, ’ll grow appreciate power flexibility R accomplishing huge variety statistical tasks.Onward upward!","code":""},{"path":"rmark.html","id":"rmark","chapter":"2 Using R Markdown","heading":"2 Using R Markdown","text":"\n2.0\n","code":""},{"path":"rmark.html","id":"functions-introduced-in-this-chapter-1","chapter":"2 Using R Markdown","heading":"Functions introduced in this chapter:","text":"R functions introduced , R Markdown syntax explained.","code":""},{"path":"rmark.html","id":"rmark-intro","chapter":"2 Using R Markdown","heading":"2.1 Introduction","text":"chapter teach use R Markdown create quality documents incorporate text R code seamlessly.downloaded chapter .Rmd file final step last chapter. downloaded file yet, please click following link :[LINK ]reading online browser, aware several instructions won’t make sense ’re looking plain text file code . Much material book can read enjoyed online, real learning comes downloading chapter files (starting Chapter 2—one) working RStudio.","code":""},{"path":"rmark.html","id":"rmark-project","chapter":"2 Using R Markdown","heading":"2.2 Are you in your project?","text":"successfully completed previous “Introduction R” chapter, created new project called 02_Using_R_Markdown RStudio placed downloaded file . (, please go back Chapter 1 complete steps creating new project RStudio.)Let’s make sure ’re project.Look upper right corner RStudio screen. say 02_Using_R_Markdown? , congratulations! project can safely skip next section “R Markdown?”’re 02_Using_R_Markdown project, click whatever say upper right corner (probably Project: (None)).next step, file likely close ’ll re-open !can click “Open Project” ’s likely 02_Using_R_Markdown project appears drop-menu list recently accessed projects. click project 02_Using_R_Markdown ’ll re-open file……’re back, hope.","code":""},{"path":"rmark.html","id":"rmark-whatis","chapter":"2 Using R Markdown","heading":"2.3 What is R Markdown?","text":"first question really , “Markdown?”Markdown way using plain text simple characters indicate formatting choices document. example, Markdown file, one can make headers using number signs (hashtags kids calling days3). notebook file just plain text file. see formatting, file converted HTML, format used web pages. (process described .)R Markdown special version Markdown also allows include R code alongside text. ’s example “code chunk”:Click little dark green, right-facing arrow upper-right corner code chunk. (icon ’m referring next faint gear icon lighter green icon downward-facing arrow.) “run” code chunk like , R produces output . ’ll say code chunks later document.document—text code chunks together—called R Notebook file.","code":"\n1 + 1"},{"path":"rmark.html","id":"rmark-previewing","chapter":"2 Using R Markdown","heading":"2.4 Previewing a document","text":"button toolbar right text says “Preview”. Go ahead push . See happens.pretty output generated, take moments look back forth original R Notebook text file (plain text RStudio). can see tricks won’t need much (embedding web links, making lists, etc.) tricks use every chapter (like R code chunks).first, ’ll want work back forth R Notebook file HTML file get used formatting plain text file get translated output HTML file. , look HTML file less often work mostly R Notebook file, previewing finished ready produce final draft.","code":""},{"path":"rmark.html","id":"rmark-literate","chapter":"2 Using R Markdown","heading":"2.5 Literate programming","text":"R Markdown one way implement “literate programming” paradigm. concept literate programming famously described Donald Knuth, eminent computer scientist. idea computer programs appear sterile file ’s full hard--read, abstruse lines computer code. Instead, functional computer code appear interspersed writing explains code.","code":""},{"path":"rmark.html","id":"rmark-reproducible","chapter":"2 Using R Markdown","heading":"2.6 Reproducible research","text":"One huge benefit organizing work R Notebooks makes work reproducible. means anyone access data R Notebook file able re-create exact analysis .far cry generally happens research. example, work Microsoft Excel, make series choices format analyze data choices take form menu commands point click mouse. record exact sequence clicks took point B way Z. show work “clean” spreadsheet anything ’ve written communicated results. errors along way, hard track .4Reproducibility minimum prerequisite statistical analysis. Sadly, case research world. training better.","code":""},{"path":"rmark.html","id":"rmark-structure","chapter":"2 Using R Markdown","heading":"2.7 Structure of an R Notebook","text":"Let’s start top. Look beginning plain R Notebook file. (’re RStudio, looking R Notebook file. looking pretty HTML file, ’ll need go back RStudio.) section top file starts ends three hyphens called YAML header. (Google really care .) title document appears already, ’ll need substitute name today’s date obvious places. Scroll now.’ve made changes document, ’ll need push “Preview” button . ’s done, look resulting HTML document. YAML header converted nicely formatted document header new information ’ve provided.Next, weird looking code instructions touch . recommend heeding advice. code allow answer questions responses appear pretty blue boxes. body chapter, answer boxes marked tags ::: {.answer} :::. Let’s try :Replace text something else. preview document see appears HTML file.careful delete two lines starting three colons (:::) surround text! mess , rest document’s formatting get screwed .clear, colorful answer boxes part standard R Markdown tool set. ’s define manually near top file. Note weird code show HTML file. works background define blue boxes show HTML file.also section headers throughout, R Notebook file look like:","code":""},{"path":"rmark.html","id":"section-header","chapter":"2 Using R Markdown","heading":"Section header","text":"hashtags Markdown code formatting headers. Additional hashtags create subsections:","code":""},{"path":"rmark.html","id":"not-quite-as-big","chapter":"2 Using R Markdown","heading":"Not quite as big","text":"actually use single number sign, # makes header big title, big. Therefore, prefer ## section headers ### subsections.need make sure blank line section header. see , look HTML document spot:\n## new section?\nsee problem?Put blank line line says “new section?” Preview one time make sure line now shows proper section header.","code":""},{"path":"rmark.html","id":"rmark-othertricks","chapter":"2 Using R Markdown","heading":"2.8 Other formatting tricks","text":"can make text italic bold using asterisks. (Don’t forget look HTML see result.)can make bullet-point lists. can made hyphens, ’ll need start blank line, put hyphens beginning new line, followed space, follows:First itemSecond itemIf want sub-items, indent least two spaces use minus sign followed space.Item\nSub-item\nSub-item\nSub-itemSub-itemItemItemOr can make ordered lists. Just use numbers R Markdown work . Sub-items work way . (, make sure ’re starting blank line space periods hyphens.)First ItemSub-itemSub-itemSecond ItemThird ItemWe can make horizontal rules. lots ways , prefer bunch asterisks row.many formatting tricks available. good resource R Markdown stuff, click link “cheat sheet”. note previous sentence syntax including hyperlinks document.5","code":""},{"path":"rmark.html","id":"rmark-codechunks","chapter":"2 Using R Markdown","heading":"2.9 R code chunks","text":"powerful feature R Markdown ability data analysis right inside document. accomplished including R code chunks. R code chunk doesn’t just show R code output file; also runs code generates output appears right code chunk.R code chunk starts three “backticks” followed letter r enclosed braces, ends three backticks. (backtick usually upper-left corner keyboard, next number 1 sharing key tilde ~.)RStudio, click little dark green, right-facing arrow upper-right corner code chunk , just earlier.pushing dark green arrow, notice output R code appeared like magic. preview HTML output, see output appear. hover mouse dark green arrow, see words “Run Current Chunk”. ’ll call Run button short.need address something always confuses people new R R Markdown. number sign (aka “hashtag”) R Notebook gives us headers sections subsections. R, however, number sign indicates “comment” line. R code , line # sample R code executed R code. can clearly see two lines following executed R code. careful! Number signs inside outside R code chunks behave differently.Typically, first code chunk appears document load packages need. using package called tidyverse (really collection lots different packages) throughout course. load now. Click Run button (dark green, right-facing arrow) code chunk .output consists bunch information generated trying load package. errors, even though one section labeled “Conflicts”. Usually, errors appear word “Error”, ’s typically clear something just didn’t work. Also note ’ve loaded package, don’t need load restart R session. example, go back try run code chunk one time, output disappear. ’s tidyverse already loaded, second “run” doesn’t actually generate output anymore.Okay, let’s something interesting now. ’ll revisit penguins data set introduced previous chapter. Remember, though, data set also lives package needs loaded. Run code chunk load palmerpenguins package:Let’s see happens try run multiple commands one code chunk:’re looking RStudio, ’s bit mess. RStudio best give asked , three separate commands . first two (head tail) print data, first two boxes output tables showing head tail data. next one (str) normally just prints information Console. RStudio gave R Console box output command.look HTML file, can see situation isn’t bad. command corresponding output appear nicely separated .Nevertheless, good practice good habit get put multiple output-generating commands R code chunks. Run following code chunks compare output mess saw :won’t look different HTML file, sure looks lot cleaner RStudio.two lines first code chunk ran ?two lines separated two code chunks? run , ’ll see one piece output. ’s line test <- c(1, 2, 3, 4) works invisibly background. vector test gets assigned, output produced. Try see (push Run button):’s harm separating lines putting chunks, ’s strictly necessary. really need separate lines produce output. (even , forget, RStudio kindly give multiple boxes output.)Suppose define new variable called test2 code chunk. PURPOSES EXERCISE, HIT RUN BUTTON YET! go look HTML file.first line defines test2 invisibly. second line asks R print value test2, HTML file see output. ’s run code chunk yet. DON’T HIT RUN BUTTON YET!Okay, now go Console RStudio (lower left corner screen). Try typing test2. get “Error: object ‘test2’ found.”happen? Global Environment doesn’t know yet. Look upper right corner screen, “Environment” tab. see test, test2.Okay, NOW GO BACK CLICK RUN BUTTON LAST CHUNK . output appears RStudio code chunk Global Environment updated.take home message :sure run code chunks RStudio!RStudio, look toolbar document, toward right. see word “Run” little drop-menu next . Click drop-menu select “Run ”. see happened? code chunks ran , means anything Global Environment now updated reflect definitions made R Notebook.’s good idea “Run ” first open new R Notebook. ensure code chunks output (meaning don’t go click Run button manually chunk, one time) Global Environment accurately reflect variables using.can “Run ” time time, ’s easier just “Run ” beginning, Run individual R code chunks manually create .Now go back Environment tab find icon little broom . Click . get popup warning “remove objects environment”. Click “Yes”. Now Global Environment empty. Go back “Run” menu select “Run ”. objects defined R Notebook file back.Clearing environment can useful time time. Maybe ’ve working chapter ’ve tried bunch stuff didn’t work, went back changed bunch code. Eventually, junk accumulates Global Environment can mess R Notebook. example, let’s define variable called my_variable., let’s calculation my_variable.Perhaps later decide don’t really need my_variable. Put hashtag front code my_variable <- 42 comment longer run, don’t touch next code chunk multiply 2. Now try running code chunk my_variable * 2 . Note my_variable still sitting Global Environment, don’t get error messages. R can still see access my_variable.Now go “Run” menu select “Restart R Run Chunks”. clears Global Environment runs R code starting top R Notebook. time get error message: object 'my_variable' found. ’ve tried calculate variable called my_variable doesn’t exist anymore. (line defined commented .)’s best make sure code chunks run loaded clean R session. “Restart R Run Chunks” option easy way clear environment re-run code chunks. can often want, definitely want one last time done. end chapter, ready prepare final draft, please select “Restart R Run Chunks”. Make sure everything still works!get rid error , uncomment line my_variable <- 42 removing hashtag added earlier.","code":"\n# Here's some sample R code\ntest <- c(1, 2, 3, 4)\nsum(test)\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nhead(penguins)\ntail(penguins)\nstr(penguins)\nhead(penguins)\ntail(penguins)\nstr(penguins)\ntest <- c(1, 2, 3, 4)\nsum(test)\ntest <- c(1, 2, 3, 4)\ntest2 <- c(\"a\", \"b\", \"c\")\ntest2\nmy_variable <- 42\nmy_variable * 2"},{"path":"rmark.html","id":"rmark-inline","chapter":"2 Using R Markdown","heading":"2.10 Inline R commands","text":"don’t need standalone R code chunk computations. One neat feature ability use R calculate things right middle text.’s example. Suppose wanted compute mean body mass (grams) penguins penguins data set. :(na.rm = TRUE part necessary two penguins missing body mass data. missing data future chapters.)can also inline using backticks putting letter r inside first backtick. Go HTML document see following sentence appears:mean body mass penguins penguins data set 4201.754386 grams.can () check make sure inline R code working checking HTML output, don’t necessarily need go HTML file find . RStudio, click cursor somewhere middle inline code chunk paragraph . Now type Ctrl-Enter Cmd-Enter (PC Mac respectively). little box pop shows answer!Notice addition inline R command calculated mean, also enclosed penguins backticks make stand output. ’ll continue computer commands R functions. clear, putting word backticks just formatting trick. want inline R code, also need letter r followed space inside backticks.","code":"\nmean(penguins$body_mass_g, na.rm = TRUE)"},{"path":"rmark.html","id":"rmark-copypaste","chapter":"2 Using R Markdown","heading":"2.11 Copying and pasting","text":"future chapters, shown run statistical analyses using R. chapter give extensive explanations statistical concepts demonstrations necessary R code. Afterwards, one exercises ask apply new-found knowledge run similar analyses different data.idea able copy paste R code previously worked examples. must thoughtful . code just copied pasted blindly. must modified applies exercises new data. requires understand code . effectively modify code don’t know parts modify.also exercises asked provide explanations interpretations analyses. copied pasted previous work. exercises designed help understand statistical concepts, must words, using understanding.order successful chapters, must following:Read every part chapter carefully!tempting skim paragraphs quickly just jump code chunk code chunk. highly detrimental ability gain necessary understanding—just complete chapter, succeed statistics overall.Copy paste thoughtfully!every piece code early part chapter necessarily apply later exercises. code apply need modified (sometimes quite heavily) able run new analyses. job understand code works can make changes without breaking things. don’t understand piece code, don’t copy paste ’ve read re-read earlier exposition explains code works.One final note copying pasting. Sometimes, people try copy paste code HTML output file. bad idea. HTML document uses special characters make output look pretty, characters don’t actually work plain text R Notebook. applies things copied pasted Word document another website. need copy paste code, sure find plain text R Notebook file (one .Rmd extension RStudio) copy paste .","code":""},{"path":"rmark.html","id":"rmark-conclusion","chapter":"2 Using R Markdown","heading":"2.12 Conclusion","text":"’s ! wasn’t much asked assignment actually show HTML output. (Make sure three things asked however: one adding name date YAML header, one typing something blue answer box, last make section header appear properly.) gain confidence move serious stats material, asked lot .Now know use R Notebook file generate pretty output files. look project folder, see three files:first file (extension .Rproj) instructed never touch.next file (extension .Rmd) R Notebook file. really nothing plain text file, although open RStudio, magic allows see output code chunks run.Finally, file extension .nb.html. pretty output file generated hit “Preview” button. (happen see files project folder, ignore mess .)completed chapter part statistics course, follow directions receive professor submit assignment.","code":"02-Using_R_Markdown.Rproj\n02-Using_R_Markdown.Rmd\n02-Using_R_Markdown.nb.html"}]
